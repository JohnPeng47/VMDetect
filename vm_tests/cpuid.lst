     1                                  ; Define variables in the data section
     2                                  SECTION .DATA
     3 00000000 564D20626974206973-     	set:     db 'VM bit is set', 10 ;10 is the decimal ascii value of '\n'
     4 00000009 207365740A         
     5                                  	setLen:  equ $-set
     6 0000000E 564D20626974206973-     	notset:	 db 'VM bit is not set', 10
     7 00000017 206E6F74207365740A 
     8                                  	notsetLen: equ $-notset
     9                                  
    10                                  ; Code goes in the text section
    11                                  SECTION .TEXT
    12                                  	GLOBAL main
    13                                  
    14                                  main:
    15 00000000 B801000000              	mov eax, 1
    16 00000005 0FA2                    	cpuid
    17 00000007 0FBAE11F                	bt ecx, 0x1f		;bt copies the bit at [operand] to the carry bit in EFLAGS
    18 0000000B 6683E101                	and cx, 0x1		
    19 0000000F 7218                    	jc vm				;branches if the carry bit is set
    20                                  
    21                                  not_vm:
    22 00000011 B804000000              	mov eax,4            ; 'write' system call = 4
    23 00000016 BB01000000              	mov ebx,1            ; file descriptor 1 = STDOUT
    24 0000001B B9[0E000000]            	mov ecx,notset        ; string to write
    25 00000020 BA12000000              	mov edx,notsetLen     ; length of string to write
    26 00000025 CD80                    	int 80h              ; call the kernel
    27 00000027 EB16                    	jmp exit
    28                                  
    29                                  vm:
    30 00000029 B804000000              	mov eax,4            ; 'write' system call = 4
    31 0000002E BB01000000              	mov ebx,1            ; file descriptor 1 = STDOUT
    32 00000033 B9[00000000]            	mov ecx,set        ; string to write
    33 00000038 BA0E000000              	mov edx,setLen     ; length of string to write
    34 0000003D CD80                    	int 80h              ; call the kernel
    35                                  	
    36                                  
    37                                  exit:
    38                                  	; Terminate program
    39 0000003F B801000000              	mov eax,1            ; 'exit' system call
    40 00000044 BB00000000              	mov ebx,0            ; exit with error code 0
    41 00000049 CD80                    	int 80h              ; call the kernel
